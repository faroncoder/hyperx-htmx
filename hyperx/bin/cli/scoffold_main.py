#!/usr/bin/env python3
"""
scoffold_main.py
──────────────────────────────────────────────
Auto-generate HyperX CLI main entrypoint by scanning
all Python files under the bin/cli tree.

Usage:
    python bin/cli/scoffold_main.py
"""

import os
import re
from pathlib import Path

ROOT = Path(__file__).resolve().parent
OUT_FILE = ROOT / "main.py"

HEADER = '''"""
Auto-generated HyperX CLI main
──────────────────────────────
DO NOT EDIT — generated by scoffold_main.py
"""
import sys
import argparse
'''

DISPATCH_HEADER = '''
def dispatch(args):
    """Auto-generated dispatcher"""
    cmd = args.command
'''

DISPATCH_FOOTER = '''
    else:
        print("⚠️ Unknown or missing command. Use: hyperx --help")
'''

MAIN_TEMPLATE = '''
def main():
    parser = argparse.ArgumentParser(prog="hyperx", description="Auto-generated HyperX CLI")
    sub = parser.add_subparsers(dest="command")

{parser_entries}

    args = parser.parse_args()
    if not args.command:
        parser.print_help()
        sys.exit(0)
    dispatch(args)

if __name__ == "__main__":
    main()
'''


def find_run_functions(file_path: Path):
    """Parse a Python file and return run_* functions if present."""
    pattern = re.compile(r"def (run_[a-zA-Z0-9_]+)\s*\(")
    try:
        return pattern.findall(file_path.read_text())
    except Exception:
        return []


def scan_cli_tree(base_dir: Path):
    """Walk the CLI directory for Python files containing run_*()"""
    commands = []
    for root, _, files in os.walk(base_dir):
        for file in files:
            if not file.endswith(".py"):
                continue
            if file in ("__init__.py", "main.py", "parser.py", "dispatcher.py", "scoffold_main.py"):
                continue

            file_path = Path(root) / file
            functions = find_run_functions(file_path)
            for func in functions:
                module_rel = file_path.relative_to(ROOT.parent).with_suffix("")
                module_name = str(module_rel).replace(os.sep, ".")
                commands.append((func, module_name))
    return commands


def scaffold_main():
    print(f"🔍 Scanning CLI tree at: {ROOT}")
    commands = scan_cli_tree(ROOT)
    print(f"📦 Found {len(commands)} runnable command(s).")

    import_lines = []
    parser_entries = []
    dispatch_cases = ["    if False: pass"]

    for func, module in commands:
        cmd_name = func.replace("run_", "")
        import_lines.append(f"from {module} import {func}")
        parser_entries.append(f'    sub.add_parser("{cmd_name}", help="Run {cmd_name} command")')
        dispatch_cases.append(f'    elif cmd == "{cmd_name}": {func}(args)')

    full_script = (
        HEADER
        + "\n".join(import_lines)
        + DISPATCH_HEADER
        + "\n".join(dispatch_cases)
        + DISPATCH_FOOTER
        + MAIN_TEMPLATE.format(parser_entries="\n".join(parser_entries))
    )

    OUT_FILE.write_text(full_script)
    print(f"✅ Generated new CLI → {OUT_FILE}")


if __name__ == "__main__":
    scaffold_main()
